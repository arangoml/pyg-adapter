#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from torch_geometric.typing import EdgeType

from .abc import Abstract_ADBPyG_Controller
from .typings import Json


class ADBPyG_Controller(Abstract_ADBPyG_Controller):
    """ArangoDB-PyG controller.

    Responsible for controlling how nodes & edges are handled when
    transitioning from ArangoDB to PyG, and vice-versa.

    You can derive your own custom ADBPyG_Controller.
    """

    def _prepare_arangodb_vertex(self, adb_vertex: Json, col: str) -> None:
        """Prepare an ArangoDB vertex before it gets inserted into its
        designated collection.

        Given an ArangoDB vertex, you can modify it before it gets inserted
        into its ArangoDB collection, and/or derive a custom vertex id by
        updating the "_key" attribute of the vertex (otherwise the
        vertex's current "_key" value will be used)

        :param adb_vertex: The ArangoDB vertex object to (optionally) modify.
        :type adb_vertex: adbnx_adapter.typings.Json
        :param col: The ArangoDB collection the vertex belongs to.
        :type col: str
        """
        pass

    def _prepare_arangodb_edge(self, adb_edge: Json, edge_type: EdgeType) -> None:
        """Prepare an ArangoDB edge before it gets inserted into its
        designated collection.

        Given an ArangoDB edge, you can modify it before it gets inserted
        into its ArangoDB edge collection, and/or derive a custom edge id
        by setting the "_key" attribute of the edge (otherwise the
        the "_key" will be randomly generated by ArangoDB)

        :param adb_edge: The ArangoDB edge object to (optionally) modify.
        :type adb_edge: adbnx_adapter.typings.Json
        :param edge_type: The Edge Type the edge belongs to. Formatted
            as (from_collection, edge_collection, to_collection)
        :type edge_type: Tuple[str, str, str]
        """
        pass
